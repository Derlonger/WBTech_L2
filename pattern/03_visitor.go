package pattern

import "fmt"

/*
	Реализовать паттерн «посетитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Visitor_pattern
*/

/*
Visitor - это поведенческий паттерн, представляет собой операцию, которая будет выполнена над объектами группы классов.
Дает возможность определить новую операцию без изменения кода классов, над которыми эта операция проводиться.

Плюсы:
	1. Разделение алгоритма и структуры объектов:
		- Паттерн позволяет отделить алгоритм (посетителя) от структуры объектов (элементов, которые посещаются).
		- Это упрощает добавление новых операций без изменения самих объектов.
	2. Добавление новых операций без модификации классов:
		- Если нам нужно выполнить какое-то действие для всех элементов, мы можем просто добавить новый посетитель,
		не изменяя существующие классы.
	3. Увеличение гибкости системы:
		-Паттерн позволяет добавлять новые функциональности без нарушения принципа открытости/закрытости.

Минусы:
	1. Сложность:
		- Внедрение паттерна может усложнить код, особенно если у нас большое количество элементов и операций.
	2. Нарушение инкапсуляции:
		- Посетитель получает доступ к приватным членам объектов, что может нарушить инкапсуляцию.
	3. Неудобство при добавлении новых элементов:
		- При добавлении нового элемента мы должны обновить все посетители, чтобы они поддерживали новый класс.
*/

// Animal - интерфейс для всех животных
type Animal interface {
	Accept(visitor ZooVisitor)
}

// Lion - класс для льва
type Lion struct{}

func (l *Lion) Accept(visitor ZooVisitor) {
	visitor.VisitLion(l)
}

// Elephant - класс для слона
type Elephant struct{}

func (e *Elephant) Accept(visitor ZooVisitor) {
	visitor.VisitElephant(e)
}

// ZooVisitor - интерфейс для посетителя
type ZooVisitor interface {
	VisitLion(lion *Lion)
	VisitElephant(elephant *Elephant)
}

// Veterinarian  - ветеринар
type Veterinarian struct {
}

func (v *Veterinarian) VisitLion(lion *Lion) {
	fmt.Println("Ветеринар осматривает льва.")
}

func (v *Veterinarian) VisitElephant(elephant *Elephant) {
	fmt.Println("Ветеринар осматривает слона.")
}

func main() {
	lion := &Lion{}
	elephant := &Elephant{}

	veterinarian := &Veterinarian{}
	lion.Accept(veterinarian)
	elephant.Accept(veterinarian)
}
