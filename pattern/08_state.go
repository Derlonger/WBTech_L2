package pattern

/*
	Реализовать паттерн «состояние».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/State_pattern
*/
/*
State(состояние) - это поведенческий паттерн проектирования, который позволяет объекту изменять свое поведение в
зависимости от внутреннего состояние.

Помогает нам использовать меньше условных конструкций, выбор которых зависит от текущего состояния объекта.

Плюсы:

	1. Избавление от больших условных операторов:
		- Паттерн Состояние позволяет избежать множественных условных конструкций в коде,
		которые зависят от текущего состояния объекта.
		- Каждое состояние инкапсулируется в отдельный класс, что делает код более читаемым и поддерживаемым.
	2. Концентрация кода, связанного с определенным состоянием:
		- Каждый класс состояния содержит только код, связанный с этим состоянием.
		- Это упрощает добавление новых состояний и обеспечивает легкость в расширении системы.

Минусы:

	1. Создание дополнительных классов:
		- Для каждого состояния требуется создание отдельного класса.
		- В небольших системах это может показаться избыточным.
	2. Отсутствие явной зависимости в других классах:
		- Объекты, использующие паттерн Состояние, не имеют явной зависимости от конкретных классов состояний.
		- Это может затруднить понимание взаимосвязей между объектами.
*/

import "fmt"

// Контекст (вода)
type WaterContext struct {
	State State
}

// Интерфейс для состояния
type State interface {
	Handle(context *WaterContext)
}

// Конкретные состояния
type SolidState struct{}

func (s *SolidState) Handle(context *WaterContext) {
	fmt.Println("Превращаем лед в жидкость")
	context.State = &LiquidState{}
}

type LiquidState struct{}

func (s *LiquidState) Handle(context *WaterContext) {
	fmt.Println("Превращаем жидкость в пар")
	context.State = &GasState{}
}

type GasState struct{}

func (s *GasState) Handle(context *WaterContext) {
	fmt.Println("Повышаем температуру водяного пара")
}

func main() {
	water := &WaterContext{State: &SolidState{}}
	water.State.Handle(water) // Переход в состояние жидкости
	water.State.Handle(water) // Переход в состояние пара
}
